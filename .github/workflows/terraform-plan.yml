name: 'Terraform Plan'

on:
  pull_request:

jobs:
  # Generates a list of folders that are used as a matrix to cycle through
  Generate-Matrix:
    name: 'Generate-Matrix'
    runs-on: ubuntu-latest
    environment: production
    outputs:
      dirs: ${{ steps.read-folders.outputs.dirs }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - id: read-folders
      run: |
        cd ./terraform
        folders=$(ls | grep -v modules | perl -e 'use JSON; @in=grep(s/\n$//, <>); print encode_json(\@in)."\n";')
        echo "dirs=$folders" >> "$GITHUB_OUTPUT"

  Format:
    needs: Generate-Matrix
    strategy:
      matrix:
        directory: ${{ fromJSON(needs.Generate-Matrix.outputs.dirs) }}
    name: 'Terraform Format'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Terraform Format
      run: terraform -chdir=terraform/${{ matrix.directory }} fmt -check

  InitPlan:
    needs: Generate-Matrix
    strategy:
      matrix:
        directory: ${{ fromJSON(needs.Generate-Matrix.outputs.dirs) }} # Reads folders in the terraform directory (excluding modules) and runs a task for each one
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Config Terraform plugin cache
      run: |
        echo 'plugin_cache_dir="$HOME/.terraform.d/plugin-cache"' >~/.terraformrc
        mkdir --parents ~/.terraform.d/plugin-cache

    - name: Cache Terraform
      uses: actions/cache@v3
      with:
        path: |
          ~/.terraform.d/plugin-cache
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          ${{ runner.os }}-terraform-

    # Connect to Azure using OIDC
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      env: 
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}   
        ARM_USE_OIDC: true
      run: terraform -chdir=terraform/${{ matrix.directory }} init

    # Generates an execution plan for Terraform and applies
    - name: Terraform Plan
      env: 
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
      run: terraform -chdir=terraform/${{ matrix.directory }} plan -no-color -input=false
      continue-on-error: true

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Status
      if: steps.plan.outcome == 'failure'
      run: exit 1